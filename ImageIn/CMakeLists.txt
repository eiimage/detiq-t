project(ImageIn C CXX)
cmake_minimum_required(VERSION 2.8.11)

find_package(JPEG)
if(JPEG_FOUND)
	include_directories(${JPEG_INCLUDE_DIR})
else()
	message(FATAL_ERROR "Cannot find JPEG library. Please add the JPEG library directory to CMAKE_PREFIX_PATH.")
endif()

find_package(PNG)
if(PNG_FOUND)
	include_directories(${PNG_INCLUDE_DIRS})
else()
	message(FATAL_ERROR "Cannot find PNG library. Please add the PNG library directory to CMAKE_PREFIX_PATH.")
endif()

find_package(Threads REQUIRED)

if(UNIX OR CMAKE_COMPILER_IS_GNUCXX)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
endif()

set(ImageIn_SOURCES
	Algorithm.h
	Algorithm.tpp
	Algorithm/Average.h
	Algorithm/Binarization.h
	Algorithm/Binarization.tpp
	Algorithm/BitPlane.h
	Algorithm/ComponentLabeling.h
	Algorithm/ComponentLabeling.tpp
	Algorithm/Difference.h
	Algorithm/Distance.h
	Algorithm/Dithering.h
	Algorithm/Dithering.tpp
	Algorithm/EdgeColoration.h
	Algorithm/Filter.cpp
	Algorithm/Filter.h
	Algorithm/Filtering.cpp
	Algorithm/Filtering.h
	Algorithm/Identity.h
	Algorithm/Inversion.h
	Algorithm/MorphoMat.cpp
	Algorithm/MorphoMat.h
	Algorithm/Otsu.h
	Algorithm/Otsu.tpp
	Algorithm/RgbToGrayscale.h
	Algorithm/RgbToGrayscale.tpp
	AlgorithmCollection.h
	AlgorithmException.h
	Array.h
	BadImageException.h
	BinaryImage.cpp
	BinaryImage.h
	BmpImage.cpp
	BmpImage.h
	Converter.h
	Converter.tpp
	EasyBMP.cpp
	EasyBMP.h
	EasyBMP_BMP.h
	EasyBMP_DataStructures.h
	EasyBMP_VariousBMPutilities.h
	GenericAlgorithm.h
	GenericAlgorithm.tpp
	Graph.cpp
	Graph.h
	GrayscaleImage.h
	GrayscaleImage.tpp
	Histogram.h
	Histogram.tpp
	Image.h
	Image.tpp
	ImageFile.h
	ImageFileAbsFactory.cpp
	ImageFileAbsFactory.h
	ImageFileException.h
	ImageFileFactory.cpp
	ImageFileFactory.h
	JpgImage.cpp
	JpgImage.h
	mystdint.h
	PixelAlgorithm.h
	PngImage.cpp
	PngImage.h
	ProjectionHistogram.h
	ProjectionHistogram.tpp
	pstdint.h
	Rectangle.h
	RgbImage.h
	RgbImage.tpp
	SpecificAlgorithm.h
	SpecificAlgorithm.tpp
	UnknownFormatException.h
	VffImage.cpp
	VffImage.h
)

add_library(ImageIn STATIC ${ImageIn_SOURCES})
target_link_libraries(ImageIn ${JPEG_LIBRARY} ${PNG_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})

add_executable(ImageIn_main main.cpp)
target_link_libraries(ImageIn_main ImageIn)

add_executable(ImageIn_test test_image.cpp)
target_link_libraries(ImageIn_test ImageIn)
# Needed to execute the tester
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/test)
